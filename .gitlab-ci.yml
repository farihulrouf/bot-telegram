image: python:3.12

stages:
  - build
  - test
  - deploy

variables:
  VENV_PATH: "myenv"

before_script:
  - apt-get update && apt-get install -y python3-venv
  - python3 -m venv $VENV_PATH
  - source $VENV_PATH/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

build:
  stage: build
  script:
    - echo "Building the application..."

test:
  stage: test
  script:
    - source $VENV_PATH/bin/activate  # Aktifkan virtual environment
    - pip freeze  # Tampilkan paket yang terinstal untuk memeriksa apakah pytest terinstal
    - which pytest  # Periksa lokasi pytest
    - pytest --maxfail=1 --disable-warnings -v

deploy:
  stage: deploy
  script:
    - echo "Menyiapkan deployment ke server..."
    - eval $(ssh-agent -s)  # Mulai ssh-agent
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa <<< "$SSH_PASSPHRASE"
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
    
    # Gunakan rsync untuk meng-upload file, kecualikan lingkungan virtual dan file yang tidak perlu
    - rsync -avz --exclude='myenv/' --exclude='.git/' * $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH
    
    - ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER << 'EOF'
        echo "Terhubung ke server"
        ls -la $DEPLOY_PATH
        cd $DEPLOY_PATH
        
        # Periksa dan buat lingkungan virtual jika belum ada
        if [ ! -d "$VENV_PATH" ]; then
          echo "Membuat lingkungan virtual..."
          python3 -m venv $VENV_PATH
        fi
        
        source $VENV_PATH/bin/activate
        
        echo "Menginstal dependensi..."
        pip install -r requirements.txt
        
        echo "Memulai aplikasi..."
        nohup uvicorn app.main:app --host 0.0.0.0 --port 8005 > app.log 2>&1 &
        
        echo "Deployment selesai"
      EOF
  only:
    - dev
